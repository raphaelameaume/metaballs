!function n(e,t,i){function r(c,a){if(!t[c]){if(!e[c]){var s="function"==typeof require&&require;if(!a&&s)return s(c,!0);if(o)return o(c,!0);var f=new Error("Cannot find module '"+c+"'");throw f.code="MODULE_NOT_FOUND",f}var u=t[c]={exports:{}};e[c][0].call(u.exports,function(n){var t=e[c][1][n];return r(t?t:n)},u,u.exports,n,e,t,i)}return t[c].exports}for(var o="function"==typeof require&&require,c=0;c<i.length;c++)r(i[c]);return r}({1:[function(n,e,t){e.exports=function(n){"string"==typeof n&&(n=[n]);for(var e=[].slice.call(arguments,1),t=[],i=0;i<n.length-1;i++)t.push(n[i],e[i]||"");return t.push(n[i]),t.join("")}},{}],2:[function(n,e,t){(function(n){(function(){var t,i,r;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof n&&null!==n&&n.hrtime?(e.exports=function(){return(t()-r)/1e6},i=n.hrtime,t=function(){var n;return n=i(),1e9*n[0]+n[1]},r=t()):Date.now?(e.exports=function(){return Date.now()-r},r=Date.now()):(e.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(this)}).call(this,n("_process"))},{_process:3}],3:[function(n,e,t){function i(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(n){if(g===setTimeout)return setTimeout(n,0);if((g===i||!g)&&setTimeout)return g=setTimeout,setTimeout(n,0);try{return g(n,0)}catch(e){try{return g.call(null,n,0)}catch(e){return g.call(this,n,0)}}}function c(n){if(l===clearTimeout)return clearTimeout(n);if((l===r||!l)&&clearTimeout)return l=clearTimeout,clearTimeout(n);try{return l(n)}catch(e){try{return l.call(null,n)}catch(e){return l.call(this,n)}}}function a(){d&&w&&(d=!1,w.length?y=w.concat(y):h=-1,y.length&&s())}function s(){if(!d){var n=o(a);d=!0;for(var e=y.length;e;){for(w=y,y=[];++h<e;)w&&w[h].run();h=-1,e=y.length}w=null,d=!1,c(n)}}function f(n,e){this.fun=n,this.array=e}function u(){}var g,l,v=e.exports={};!function(){try{g="function"==typeof setTimeout?setTimeout:i}catch(n){g=i}try{l="function"==typeof clearTimeout?clearTimeout:r}catch(n){l=r}}();var w,y=[],d=!1,h=-1;v.nextTick=function(n){var e=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)e[t-1]=arguments[t];y.push(new f(n,e)),1!==y.length||d||o(s)},f.prototype.run=function(){this.fun.apply(null,this.array)},v.title="browser",v.browser=!0,v.env={},v.argv=[],v.version="",v.versions={},v.on=u,v.addListener=u,v.once=u,v.off=u,v.removeListener=u,v.removeAllListeners=u,v.emit=u,v.binding=function(n){throw new Error("process.binding is not supported")},v.cwd=function(){return"/"},v.chdir=function(n){throw new Error("process.chdir is not supported")},v.umask=function(){return 0}},{}],4:[function(n,e,t){(function(t){for(var i=n("performance-now"),r="undefined"==typeof window?t:window,o=["moz","webkit"],c="AnimationFrame",a=r["request"+c],s=r["cancel"+c]||r["cancelRequest"+c],f=0;!a&&f<o.length;f++)a=r[o[f]+"Request"+c],s=r[o[f]+"Cancel"+c]||r[o[f]+"CancelRequest"+c];if(!a||!s){var u=0,g=0,l=[],v=1e3/60;a=function(n){if(0===l.length){var e=i(),t=Math.max(0,v-(e-u));u=t+e,setTimeout(function(){var n=l.slice(0);l.length=0;for(var e=0;e<n.length;e++)if(!n[e].cancelled)try{n[e].callback(u)}catch(t){setTimeout(function(){throw t},0)}},Math.round(t))}return l.push({handle:++g,callback:n,cancelled:!1}),g},s=function(n){for(var e=0;e<l.length;e++)l[e].handle===n&&(l[e].cancelled=!0)}}e.exports=function(n){return a.call(r,n)},e.exports.cancel=function(){s.apply(r,arguments)},e.exports.polyfill=function(){r.requestAnimationFrame=a,r.cancelAnimationFrame=s}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"performance-now":2}],5:[function(n,e,t){"use strict";function i(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function r(n,e){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?n:e}function o(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(n,e):n.__proto__=e)}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function n(n,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}return function(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}}(),a=function(n){function e(n,t){i(this,e);var o=r(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));o.position.x=Math.floor(Math.random()*window.innerWidth),o.position.y=Math.floor(Math.random()*window.innerHeight),o.velocity=new THREE.Vector3(Math.random(),Math.random(),0);var c=Math.floor(3*Math.random())+2;return o.velocity.multiplyScalar(c),o.radius=Math.floor(40*Math.random())+30,o}return o(e,n),c(e,[{key:"update",value:function(n){this.position.add(this.velocity),(this.position.x<0||this.position.x>window.innerWidth)&&(this.velocity.x*=-1),(this.position.y<0||this.position.y>window.innerHeight)&&(this.velocity.y*=-1);var e=.05*Math.sin(n);this.radius+=e}}]),e}(THREE.Object3D);t["default"]=a},{}],6:[function(n,e,t){"use strict";function i(n){return n&&n.__esModule?n:{"default":n}}function r(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}var o=function(){function n(n,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}return function(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}}(),c=n("raf"),a=i(c),s=n("./Blob"),f=i(s),u=n("glslify"),g=function(){function n(){r(this,n),this.backgroundColor=0,this.resize=this.resize.bind(this),this.update=this.update.bind(this),this.init(),this.bindListeners()}return o(n,[{key:"init",value:function(){var n=document.getElementById("canvas");this.renderer=new THREE.WebGLRenderer({canvas:n,antialias:!0,alpha:!1}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setClearColor(this.backgroundColor),this.scene=new THREE.Scene,this.camera=new THREE.OrthographicCamera(window.innerWidth*-.5,.5*window.innerWidth,.5*window.innerHeight,window.innerHeight*-.5,1,1e3),this.camera.position.z=50,this.scene.add(this.camera),this.time=0,this.addElements(),this.update()}},{key:"bindListeners",value:function(){window.addEventListener("resize",this.resize)}},{key:"addElements",value:function(){this.blobs=[];for(var n=[],e=[],t=0;15>t;t++){var i=new f["default"];n.push(new THREE.Vector3(i.position.x,i.position.y,0)),e.push(i.radius),this.blobs.push(i)}this.uniforms=[],this.uniforms.uRadiuses={type:"fv1",value:e},this.uniforms.uCenters={type:"v3v",value:n},this.uniforms.uColor={type:"v3",value:new THREE.Vector3(.57,.28,0)},this.uniforms.uTime={type:"f",value:this.time},this.uniforms.uResolution={type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)},this.planeGeometry=new THREE.PlaneGeometry(window.innerWidth,window.innerHeight,32),this.material=new THREE.ShaderMaterial({vertexShader:u(["#define GLSLIFY 1\nvoid main() {\n  	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"]),fragmentShader:u(['#define GLSLIFY 1\nuniform vec2 uCenters[15];\nuniform float uRadiuses[15];\nuniform float uTime;\n\nuniform vec2 uResolution;\nuniform vec3 uColor;\n\n//\n// GLSL textureless classic 4D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec4 P)\n{\n  vec4 Pi0 = floor(P); // Integer part for indexing\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 ixy00 = permute(ixy0 + iw0);\n  vec4 ixy01 = permute(ixy0 + iw1);\n  vec4 ixy10 = permute(ixy1 + iw0);\n  vec4 ixy11 = permute(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n\nvoid main() {\n	float sum = 0.;\n	float displacement = cnoise(vec4(gl_FragCoord.xyz, uTime));\n\n	for (int i = 0; i < 15; ++i) {\n\n		vec3 point = vec3(uCenters[i].x, uCenters[i].y, 0.);\n		float dist = distance(point, gl_FragCoord.xyz);\n		float color = uRadiuses[i] / dist;\n		\n		sum += color;\n	}\n\n  	gl_FragColor = vec4(sum * uColor.x, sum * uColor.y, sum * uColor.z, 1.);\n}']),uniforms:this.uniforms}),this.plane=new THREE.Mesh(this.planeGeometry,this.material),this.scene.add(this.plane)}},{key:"update",value:function(){this.time+=.01;for(var n=[],e=[],t=0;t<this.blobs.length;t++){var i=this.blobs[t];i.update(this.time),n.push(new THREE.Vector3(i.position.x,i.position.y,0)),e.push(i.radius)}this.uniforms.uRadiuses.value=e,this.uniforms.uCenters.value=n,this.uniforms.uTime.value=this.time,this.renderer.render(this.scene,this.camera),(0,a["default"])(this.update)}},{key:"resize",value:function(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}}]),n}();new g},{"./Blob":5,glslify:1,raf:4}]},{},[6]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
